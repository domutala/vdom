!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.vdom=t():e.vdom=t()}(self,(()=>(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>n});const r=(e,t={},r=[])=>((t instanceof Node||"string"==typeof t||Array.isArray(t))&&(r=t,t={}),{tagName:e,attrs:t.attrs||{},on:t.on||{},children:r});class n{el;vnode;data={};$createElement=r;$h=r;render(){return this.$h("span")}create=()=>this.render();mount=e=>{this.data=new Proxy(this.data,{get:(e,t)=>Reflect.get(e,t),set:(e,t,r)=>(e[t]=r,this.rebuild(),!0)}),this.vnode=this.create();const t=this.$render(this.vnode);return this.el=this.$mount(t,e),this.el};rebuild=()=>{const e=this.create(),t=this.$diff(this.vnode,e);this.el=t(this.el),this.vnode=e};setClass=e=>{const t=[];if("object"==typeof e)for(const r of Object.keys(e))e[r]&&t.push(r);else t.push(e);return t.join(" ")};$renderElem=e=>{const t=document.createElement(e.tagName);for(const[r,n]of Object.entries(e.attrs))"model"===r&&["input","select","textarea"].includes(e.tagName)?(t.addEventListener("input",(e=>{let r=(e.srcElement||e.target).value;"number"==t.getAttribute("type")&&(r=Number(r)),this.data[n]=r})),t.setAttribute("value",this.data[n])):t.setAttribute(r,n);for(const[r,n]of Object.entries(e.on))t.addEventListener(r,n);for(const r of e.children)t.appendChild(this.$render(r));return t};$render=e=>e?"string"==typeof e?document.createTextNode(e):this.$renderElem(e):document.createComment(" ");$mount=(e,t)=>(t.replaceWith(e),e);$diffZip=(e,t)=>{const r=[];for(let n=0;n<Math.max(e.length,t.length);n++)r.push([e[n],t[n]]);return r};$diffAttrs=(e,t)=>{const r=[];for(const[e,n]of Object.entries(t))r.push((t=>(t.setAttribute(e,n),t)));for(const n in e)n in t||r.push((e=>(e.removeAttribute(n),e)));return e=>{for(const t of r)t(e)}};$diffChildren=(e,t)=>{const r=[];e.forEach(((e,n)=>{r.push(this.$diff(e,t[n]))}));const n=[];for(const r of t.slice(e.length))n.push((e=>(e.appendChild(this.$render(r)),e)));return e=>{for(const[t,n]of this.$diffZip(r,e.childNodes))t(n);for(const t of n)t(e);return e}};$diff=(e,t)=>{if(void 0===t)return e=>{const t=document.createComment(" ");return e.replaceWith(t),t};if("string"==typeof e||"string"==typeof t)return e!==t?e=>{const r=this.$render(t);return e.replaceWith(r),r}:e=>{};if(e.tagName!==t.tagName)return e=>{const r=this.$render(t);return e.replaceWith(r),r};const r=this.$diffAttrs(e.attrs,t.attrs),n=this.$diffChildren(e.children,t.children);return e=>(r(e),n(e),e)}}return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,